/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package lexismanage.vista;

import com.mysql.cj.protocol.Resultset;
import java.awt.Color;
import java.sql.*;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.*;
import javax.swing.JComboBox;
import lexismanage.Conexion;
import java.util.Date;
import javax.swing.JOptionPane;

/**
 *
 * @author alexi
 */
public class MenuPagos extends javax.swing.JPanel {

    /**
     * Creates new form usuarios
     */
          Conexion conexion= new Conexion();
          Connection con=conexion.conectar();
          public int idobtenido=-1;
          
    public MenuPagos() {
        initComponents();
        Date fechaActual = new Date();
        seleccionardia.setDate(fechaActual);
        mostrarcombo("Membresia","nombre", COMBOMEMBRESIAS);
        mostrarcombo("MetodoPago","metodo", COMBOMETODOPAGO);
    }
    
   public int obtenerId(String campo, String tabla, String campoFiltro, String valorFiltro) {
    int idObtenido = -1; // Valor por defecto si no se encuentra
    String sql = "SELECT " + campo + " FROM " + tabla + " WHERE " + campoFiltro + " = ?";
    
    Conexion conexion = new Conexion();
    try (Connection con = conexion.conectar(); 
         PreparedStatement pt = con.prepareStatement(sql)) {
        
        pt.setString(1, valorFiltro); // Asigna el valor que deseas filtrar
        ResultSet rs = pt.executeQuery();
        
        if (rs.next()) {
            idObtenido = rs.getInt(campo); // Obtiene el ID
        }
    } catch (Exception e) {
        e.printStackTrace();
    }
    
    return idObtenido;
}

 public String obtenerEstadoMembresia(int id_usuario) {
    String estadoMembresia = "";
    
    // Consulta SQL para obtener el estado de la membresía del usuario
    String sql = "SELECT em.estado FROM Usuario u "
               + "JOIN EstadoMembresia em ON u.id_estado = em.id_estado "
               + "WHERE u.id_usuario = ?";

    try (PreparedStatement pstmt = con.prepareStatement(sql)) {
        pstmt.setInt(1, id_usuario);
        
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                estadoMembresia = rs.getString("estado");
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
    }

    return estadoMembresia;
}
    public void mostrarcombo(String tabla,String campo,JComboBox<String> comboBox){
        
        String sql = "select * from "+tabla;
        Statement st;
        
        
        Connection con =conexion.conectar();
        
        
        try {
         st = con.createStatement();
          ResultSet rs = st.executeQuery(sql);
          while(rs.next()){
           comboBox.addItem(rs.getString(campo));
          }
            
        } catch (Exception e) {
        }          
        
    }
    private double obtenerMontoMembresia(int idMembresia) {
    String sql = "SELECT costo FROM Membresia WHERE id_membresia = ?";
    double monto = 0.0;

    try (PreparedStatement pstmt = con.prepareStatement(sql)) {
        pstmt.setInt(1, idMembresia);
        ResultSet rs = pstmt.executeQuery();
        
        if (rs.next()) {
            monto = rs.getDouble("costo");
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al obtener el monto de la membresía: " + e.getMessage());
    }

    return monto;
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuBar1 = new java.awt.MenuBar();
        menu1 = new java.awt.Menu();
        menu2 = new java.awt.Menu();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        agregarpago = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        CAMPOIDUSUARIO = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        COMBOMEMBRESIAS = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        COMBOMETODOPAGO = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        seleccionardia = new com.toedter.calendar.JDateChooser();

        menu1.setLabel("File");
        menuBar1.add(menu1);

        menu2.setLabel("Edit");
        menuBar1.add(menu2);

        setBackground(new java.awt.Color(10, 16, 30));
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI Semibold", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("PAGOS");

        jLabel3.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Gestion Pagos");

        agregarpago.setBackground(new java.awt.Color(255, 77, 88));
        agregarpago.setFont(new java.awt.Font("Yu Gothic UI", 3, 18)); // NOI18N
        agregarpago.setForeground(new java.awt.Color(242, 242, 242));
        agregarpago.setText("Agregar Pago");
        agregarpago.setBorder(null);
        agregarpago.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarpagoActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("ID Usuario:");

        CAMPOIDUSUARIO.setBackground(new java.awt.Color(242, 242, 242));
        CAMPOIDUSUARIO.setFont(new java.awt.Font("Yu Gothic UI", 3, 14)); // NOI18N
        CAMPOIDUSUARIO.setForeground(new java.awt.Color(153, 153, 153));
        CAMPOIDUSUARIO.setText(" Ingrese ID Usuario");
        CAMPOIDUSUARIO.setToolTipText("");
        CAMPOIDUSUARIO.setBorder(null);
        CAMPOIDUSUARIO.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                CAMPOIDUSUARIOMousePressed(evt);
            }
        });
        CAMPOIDUSUARIO.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CAMPOIDUSUARIOActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Membresia :");

        COMBOMEMBRESIAS.setFont(new java.awt.Font("Yu Gothic UI", 3, 14)); // NOI18N
        COMBOMEMBRESIAS.setBorder(null);

        jLabel7.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Metodo Pago");

        COMBOMETODOPAGO.setFont(new java.awt.Font("Yu Gothic UI", 3, 14)); // NOI18N
        COMBOMETODOPAGO.setBorder(null);

        jLabel8.setFont(new java.awt.Font("Segoe UI Semibold", 3, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Inicio Membresia :");

        seleccionardia.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(378, 378, 378)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(agregarpago, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(119, 119, 119)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(CAMPOIDUSUARIO, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(52, 52, 52)
                                        .addComponent(COMBOMEMBRESIAS, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(COMBOMETODOPAGO, 0, 201, Short.MAX_VALUE)
                                            .addComponent(seleccionardia, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                                .addGap(16, 16, 16))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(505, 505, 505)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(519, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(CAMPOIDUSUARIO)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(COMBOMEMBRESIAS, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(seleccionardia, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(COMBOMETODOPAGO, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(agregarpago, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void agregarpagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarpagoActionPerformed
           String selectcombomem = (String) COMBOMEMBRESIAS.getSelectedItem();
    String selectcombomet = (String) COMBOMETODOPAGO.getSelectedItem();
        
    // Verificar que la conexión esté activa
    if (con == null) {
        JOptionPane.showMessageDialog(this, "Error: No hay conexión a la base de datos.");
        return;
    }

    // Obtener los IDs correspondientes
    int id_usuario = obtenerId("id_usuario", "Usuario", "identificacion", CAMPOIDUSUARIO.getText());
    int idmembresia = obtenerId("id_membresia", "Membresia", "nombre", selectcombomem);
    int idmetodopago = obtenerId("id_metodo_pago", "MetodoPago", "metodo", selectcombomet);

    // Obtener el estado actual de la membresía del usuario
    String estadoMembresia = obtenerEstadoMembresia(id_usuario);

    // Verificar si la membresía está activa
    if (estadoMembresia.equals("Activa")) {
        JOptionPane.showMessageDialog(this, "La membresía ya está activa. No es necesario crear un nuevo pago.");
        return;
    }

    
    int duracion = obtenerId("duracion", "Membresia", "nombre", selectcombomem);
    double montoMembresia = obtenerMontoMembresia(idmembresia); // Obtener el monto de la membresía
    LocalDate fechaInicio = LocalDate.now(); // Fecha actual
    LocalDate fechaFin = fechaInicio.plusDays(duracion); // Calcula la fecha de fin

    // Convertir LocalDate a java.sql.Date
    java.sql.Date sqlFechaInicio = java.sql.Date.valueOf(fechaInicio);
    java.sql.Date sqlFechaFin = java.sql.Date.valueOf(fechaFin);

    String sqlInsertPago = "INSERT INTO Pago (id_usuario, id_membresia, fecha_inicio, fecha_fin, id_metodo_pago) VALUES (?, ?, ?, ?, ?)";

    int idPagoGenerado = 0; 

    try (PreparedStatement pstmt = con.prepareStatement(sqlInsertPago, Statement.RETURN_GENERATED_KEYS)) {
        pstmt.setInt(1, id_usuario);
        pstmt.setInt(2, idmembresia);
        pstmt.setDate(3, sqlFechaInicio); 
        pstmt.setDate(4, sqlFechaFin);    
        pstmt.setInt(5, idmetodopago);
        pstmt.executeUpdate();

        // Obtener el ID del pago generado
        ResultSet rs = pstmt.getGeneratedKeys();
        if (rs.next()) {
            idPagoGenerado = rs.getInt(1);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al insertar el pago: " + e.getMessage());
        return;
    }

    // Insertar el registro en la tabla Ingresos
    String sqlInsertIngreso = "INSERT INTO Ingresos (id_pago, monto, fecha) VALUES (?, ?, ?)";
    try (PreparedStatement pstmtIngreso = con.prepareStatement(sqlInsertIngreso)) {
        pstmtIngreso.setInt(1, idPagoGenerado); // ID del pago generado
        pstmtIngreso.setDouble(2, montoMembresia); // Monto de la membresía
        pstmtIngreso.setDate(3, sqlFechaInicio);  // Fecha del ingreso
        pstmtIngreso.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al insertar el ingreso: " + e.getMessage());
        return;
    }

    // Actualizar el estado de la membresía del usuario a "Activa"
    String sqlUpdateEstado = "UPDATE Usuario SET id_estado = (SELECT id_estado FROM EstadoMembresia WHERE estado = 'Activa') WHERE id_usuario = ?";

    try (PreparedStatement pstmt = con.prepareStatement(sqlUpdateEstado)) {
        pstmt.setInt(1, id_usuario);
        pstmt.executeUpdate();
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error al actualizar el estado de la membresía: " + e.getMessage());
        return;
    }

    JOptionPane.showMessageDialog(this, "Pago creado y membresía activada correctamente.");

    }//GEN-LAST:event_agregarpagoActionPerformed

    private void CAMPOIDUSUARIOMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CAMPOIDUSUARIOMousePressed
        // TODO add your handling code here:
        
        if(CAMPOIDUSUARIO.getText().equals(" Ingrese ID Usuario")){
            CAMPOIDUSUARIO.setText("");
            CAMPOIDUSUARIO.setForeground(Color.black);
        }
    }//GEN-LAST:event_CAMPOIDUSUARIOMousePressed

    private void CAMPOIDUSUARIOActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CAMPOIDUSUARIOActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_CAMPOIDUSUARIOActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
        if(CAMPOIDUSUARIO.getText().isEmpty()){
            CAMPOIDUSUARIO.setText(" Ingrese ID Usuario");
            CAMPOIDUSUARIO.setForeground(Color.gray);
        }
    }//GEN-LAST:event_formMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CAMPOIDUSUARIO;
    private javax.swing.JComboBox<String> COMBOMEMBRESIAS;
    private javax.swing.JComboBox<String> COMBOMETODOPAGO;
    private javax.swing.JButton agregarpago;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private java.awt.Menu menu1;
    private java.awt.Menu menu2;
    private java.awt.MenuBar menuBar1;
    private com.toedter.calendar.JDateChooser seleccionardia;
    // End of variables declaration//GEN-END:variables
}
